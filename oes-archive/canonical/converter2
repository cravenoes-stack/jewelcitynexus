<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OES Data Viewer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto Mono', monospace;
            background: #0d1117;
            color: #c9d1d9;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 2rem;
            line-height: 1.6;
        }

        .container {
            width: 100%;
            max-width: 1200px;
        }

        .card {
            background-color: #161b22;
            border: 1px solid #30363d;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.3);
            transform: translateY(-2px);
        }

        .drag-zone {
            border: 2px dashed #30363d;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .drag-zone.active {
            border-color: #58a6ff;
            background-color: #263345;
        }
        
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div class="container space-y-8">
        <!-- Header Section -->
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-200">OES Data Ingestion Hub</h1>
            <p class="mt-2 text-gray-400">Upload, view, and organize data for canonical archiving.</p>
        </header>

        <!-- File Upload Section -->
        <div class="card">
            <h2 class="text-xl font-bold mb-4">Upload Files</h2>
            <div id="drag-zone" class="drag-zone">
                <p class="text-gray-400">Drag & drop files here, or <span class="text-blue-400 font-semibold">click to browse</span></p>
                <input type="file" id="fileInput" class="hidden" multiple>
            </div>
            <div id="message-box" class="mt-4 text-center hidden p-2 rounded-md font-medium"></div>
        </div>
        
        <!-- File Display Section -->
        <div class="card">
            <h2 class="text-xl font-bold mb-4">Archived Threads</h2>
            <div id="threads-container" class="space-y-6">
                <!-- Thread cards will be dynamically added here -->
                <p class="text-gray-500 text-center">No files uploaded yet. Upload a file to see its content here.</p>
            </div>
        </div>
    </div>

    <script>
        const dragZone = document.getElementById('drag-zone');
        const fileInput = document.getElementById('fileInput');
        const threadsContainer = document.getElementById('threads-container');
        const messageBox = document.getElementById('message-box');

        // Function to display messages
        function showMessage(text, isError = false) {
            messageBox.textContent = text;
            messageBox.classList.remove('hidden', 'bg-red-500/20', 'text-red-300', 'bg-green-500/20', 'text-green-300');
            messageBox.classList.add(isError ? 'bg-red-500/20 text-red-300' : 'bg-green-500/20 text-green-300');
        }

        // Handle file drop
        dragZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dragZone.classList.add('active');
        });

        dragZone.addEventListener('dragleave', () => {
            dragZone.classList.remove('active');
        });

        dragZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dragZone.classList.remove('active');
            const files = e.dataTransfer.files;
            handleFiles(files);
        });

        // Handle file input click
        dragZone.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (e) => {
            const files = e.target.files;
            handleFiles(files);
        });

        function handleFiles(files) {
            if (files.length === 0) {
                showMessage("No files selected.", true);
                return;
            }

            // Remove the placeholder text
            const placeholder = threadsContainer.querySelector('p');
            if (placeholder) {
                placeholder.remove();
            }

            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target.result;
                    const card = document.createElement('div');
                    card.className = 'card';
                    card.innerHTML = `
                        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 border-b border-gray-600 pb-2">
                            <h3 class="text-lg font-semibold text-blue-400 break-all">${file.name}</h3>
                            <span class="text-sm text-gray-500 mt-1 sm:mt-0">Size: ${(file.size / 1024).toFixed(2)} KB</span>
                        </div>
                        <pre>${content}</pre>
                    `;
                    threadsContainer.appendChild(card);
                    showMessage(`File "${file.name}" successfully loaded.`);
                };
                reader.onerror = () => {
                    showMessage(`Could not read file "${file.name}".`, true);
                };
                reader.readAsText(file);
            });
        }
    </script>
</body>
</html>
